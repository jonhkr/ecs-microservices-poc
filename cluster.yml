AWSTemplateFormatVersion: '2010-09-09'
Description: 'Microservices Cluster'

Parameters:
  EnvironmentName:
    Type: String
  VPC:
    Type: String
  PublicSubnetA:
    Type: String
  PublicSubnetB:
    Type: String
  PrivateSubnetA:
    Type: String
  PrivateSubnetB:
    Type: String

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref 'AWS::StackName'

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${EnvironmentName}:VPC'
  ClusterName:
    Description: The name of the ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${EnvironmentName}:ClusterName'
  ContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
    Export:
      Name: !Sub '${EnvironmentName}:ContainerSecurityGroup'
  PublicSubnetA:
    Description: Public subnet A
    Value: !Ref 'PublicSubnetA'
    Export:
      Name: !Sub '${EnvironmentName}:PublicSubnetA'
  PublicSubnetB:
    Description: Public subnet B
    Value: !Ref 'PublicSubnetB'
    Export:
      Name: !Sub '${EnvironmentName}:PublicSubnetB'
  PrivateSubnetA:
    Description: Private subnet A
    Value: !Ref 'PrivateSubnetA'
    Export:
      Name: !Sub '${EnvironmentName}:PrivateSubnetA'
  PrivateSubnetB:
    Description: Private subnet B
    Value: !Ref 'PrivateSubnetB'
    Export:
      Name: !Sub '${EnvironmentName}:PrivateSubnetB'
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Sub '${EnvironmentName}:ECSTaskExecutionRole'
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Sub '${EnvironmentName}:ECSRole'